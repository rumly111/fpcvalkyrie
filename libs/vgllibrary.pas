unit vgllibrary;
{$include ../src/valkyrie.inc}
{$MACRO ON}
interface
uses Classes, SysUtils, Types, vlibrary;

const
{$IFDEF WINDOWS}
  GLDefaultPath = 'opengl32.dll';
{$ELSE}
  {$IF DEFINED(DARWIN)}
  GLDefaultPath = '/System/Library/Frameworks/OpenGL.framework/Libraries/libGL.dylib';
  {$ELSEIF DEFINED(ANDROID)}
  GLDefaultPath = 'libGLESv1_CM.so';
  {$DEFINE GLES11}
  {$ELSE}
  GLDefaultPath = 'libGL.so.1';
  {$ENDIF}
{$ENDIF}

{$include vgltypes.inc}
{$include vglconst.inc}

{$IFDEF UNIX}
  {$DEFINE extdecl := cdecl}
{$ELSE}
  {$DEFINE extdecl := stdcall}
{$ENDIF}

var

  glAlphaFunc: procedure(func: GLenum; ref: GLclampf); extdecl;
  glBindTexture: procedure(target: GLenum; texture: GLuint); extdecl;
  glBlendFunc: procedure(sfactor, dfactor: GLenum); extdecl;
  glClear: procedure(mask: GLbitfield); extdecl;
  glClearColor: procedure(red, green, blue, alpha: GLclampf); extdecl;
  glClearDepthf: procedure(depth: GLclampf); extdecl;
  glClearStencil: procedure(s: GLint); extdecl;
  glColor4f: procedure(red, green, blue, alpha: GLfloat); extdecl;
  glColor4ub: procedure(red, green, blue, alpha: GLubyte); extdecl;
  glColorMask: procedure(red, green, blue, alpha: GLboolean); extdecl;
  glColorPointer: procedure(size: GLint; atype: GLenum; stride: GLsizei; const pointer: Pointer); extdecl;
  glCopyTexImage2D: procedure(target: GLenum; level: GLint; internalFormat: GLenum; x, y: GLint; width, height: GLsizei; border: GLint); extdecl;
  glCopyTexSubImage2D: procedure(target: GLenum; level, xoffset, yoffset, x, y: GLint; width, height: GLsizei); extdecl;
  glCullFace: procedure(mode: GLenum); extdecl;
  glDeleteTextures: procedure(n: GLsizei; const textures: PGLuint); extdecl;
  glDepthFunc: procedure(func: GLenum); extdecl;
  glDepthMask: procedure(flag: GLboolean); extdecl;
  glDisable: procedure(cap: GLenum); extdecl;
  glDisableClientState: procedure(aarray: GLenum); extdecl;
  glDrawArrays: procedure(mode: GLenum; first: GLint; count: GLsizei); extdecl;
  glDrawElements: procedure(mode: GLenum; count: GLsizei; atype: GLenum; const indices: Pointer); extdecl;
  glEnable: procedure(cap: GLenum); extdecl;
  glEnableClientState: procedure(aarray: GLenum); extdecl;
  glFinish: procedure; extdecl;
  glFlush: procedure; extdecl;
  glFogf: procedure(pname: GLenum; param: GLfloat); extdecl;
  glFogfv: procedure(pname: GLenum; const params: PGLfloat); extdecl;
  glFrontFace: procedure(mode: GLenum); extdecl;
  glGenTextures: procedure(n: GLsizei; textures: PGLuint); extdecl;
  glGetBooleanv: procedure(pname: GLenum; params: PGLboolean); extdecl;
  glGetError: function: GLenum; extdecl;
  glGetFloatv: procedure(pname: GLenum; params: PGLfloat); extdecl;
  glGetIntegerv: procedure(pname: GLenum; params: PGLint); extdecl;
  glGetLightfv: procedure(light, pname: GLenum; params: PGLfloat); extdecl;
  glGetMaterialfv: procedure(face, pname: GLenum; params: PGLfloat); extdecl;
  glGetPointerv: procedure(pname: GLenum; params: Pointer); extdecl;
  glGetString: function(name: GLenum): PChar; extdecl;
  glGetTexEnvfv: procedure(target, pname: GLenum; params: PGLfloat); extdecl;
  glGetTexEnviv: procedure(target, pname: GLenum; params: PGLint); extdecl;
  glGetTexParameterfv: procedure(target, pname: GLenum; params: PGLfloat); extdecl;
  glGetTexParameteriv: procedure(target, pname: GLenum; params: PGLint); extdecl;
  glHint: procedure(target, mode: GLenum); extdecl;
  glIsEnabled: function(cap: GLenum): GLboolean; extdecl;
  glIsTexture: function(texture: GLuint): GLboolean; extdecl;
  glLightModelf: procedure(pname: GLenum; param: GLfloat); extdecl;
  glLightModelfv: procedure(pname: GLenum; const params: PGLfloat); extdecl;
  glLightf: procedure(light, pname: GLenum; param: GLfloat); extdecl;
  glLightfv: procedure(light, pname: GLenum; const params: PGLfloat); extdecl;
  glLineWidth: procedure(width: GLfloat); extdecl;
  glLoadIdentity: procedure; extdecl;
  glLoadMatrixf: procedure(const m: PGLfloat); extdecl;
  glLogicOp: procedure(opcode: GLenum); extdecl;
  glMaterialf: procedure(face, pname: GLenum; param: GLfloat); extdecl;
  glMaterialfv: procedure(face, pname: GLenum; const params: PGLfloat); extdecl;
  glMatrixMode: procedure(mode: GLenum); extdecl;
  glMultMatrixf: procedure(const m: PGLfloat); extdecl;
  glNormal3f: procedure(nx, ny, nz: GLfloat); extdecl;
  glNormalPointer: procedure(atype: GLenum; stride: GLsizei; const pointer: Pointer); extdecl;
  glOrthof: procedure(left, right, bottom, top, zNear, zFar: GLfloat); extdecl;
  glPixelStorei: procedure(pname: GLenum; param: GLint); extdecl;
  glPointSize: procedure(size: GLfloat); extdecl;
  glPolygonOffset: procedure(factor, units: GLfloat); extdecl;
  glPopMatrix: procedure; extdecl;
  glPushMatrix: procedure; extdecl;
  glReadPixels: procedure(x, y: GLint; width, height: GLsizei; format, atype: GLenum; pixels: Pointer); extdecl;
  glRotatef: procedure(angle, x, y, z: GLfloat); extdecl;
  glScalef: procedure(x, y, z: GLfloat); extdecl;
  glScissor: procedure(x, y: GLint; width, height: GLsizei); extdecl;
  glShadeModel: procedure(mode: GLenum); extdecl;
  glStencilFunc: procedure(func: GLenum; ref: GLint; mask: GLuint); extdecl;
  glStencilMask: procedure(mask: GLuint); extdecl;
  glStencilOp: procedure(fail, zfail, zpass: GLenum); extdecl;
  glTexCoordPointer: procedure(size: GLint; atype: GLenum; stride: GLsizei; const pointer: Pointer); extdecl;
  glTexEnvf: procedure(target: GLenum; pname: GLenum; param: GLfloat); extdecl;
  glTexEnvfv: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); extdecl;
  glTexEnvi: procedure(target: GLenum; pname: GLenum; param: GLint); extdecl;
  glTexEnviv: procedure(target: GLenum; pname: GLenum; const params: PGLint); extdecl;
  glTexImage2D: procedure(target: GLenum; level: GLInt; internalformat: GLEnum; width, height: GLsizei; border: GLint; format, atype: GLenum; const pixels: Pointer); extdecl;
  glTexParameterf: procedure(target: GLenum; pname: GLenum; param: GLfloat); extdecl;
  glTexParameterfv: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); extdecl;
  glTexParameteri: procedure(target: GLenum; pname: GLenum; param: GLint); extdecl;
  glTexParameteriv: procedure(target: GLenum; pname: GLenum; const params: PGLint); extdecl;
  glTexSubImage2D: procedure(target: GLenum; level, xoffset, yoffset: GLint; width, height: GLsizei; format, atype: GLenum; const pixels: Pointer); extdecl;
  glTranslatef: procedure(x, y, z: GLfloat); extdecl;
  glVertexPointer: procedure(size: GLint; atype: GLenum; stride: GLsizei; const pointer: Pointer); extdecl;
  glViewport: procedure(x, y: GLint; width, height: GLsizei); extdecl;

{$IFNDEF GLES11}
  glAccum: procedure(op: GLenum; value: GLfloat); extdecl;
  glAreTexturesResident: function (n: GLsizei; const textures: PGLuint; residences: PGLboolean): GLboolean; extdecl;
  glArrayElement: procedure(i: GLint); extdecl;
  glBegin: procedure(mode: GLenum); extdecl;
  glBitmap: procedure (width, height: GLsizei; xorig, yorig: GLfloat; xmove, ymove: GLfloat; const bitmap: PGLubyte); extdecl;
  glCallList: procedure(list: GLuint); extdecl;
  glCallLists: procedure(n: GLsizei; atype: GLenum; const lists: Pointer); extdecl;
  glClearAccum: procedure(red, green, blue, alpha: GLfloat); extdecl;
  glClearDepth: procedure(depth: GLclampd); extdecl;
  glClearIndex: procedure(c: GLfloat); extdecl;
  glClipPlane: procedure(plane: GLenum; const equation: PGLdouble); extdecl;
  glColor3b: procedure(red, green, blue: GLbyte); extdecl;
  glColor3bv: procedure(const v: PGLbyte); extdecl;
  glColor3d: procedure(red, green, blue: GLdouble); extdecl;
  glColor3dv: procedure(const v: PGLdouble); extdecl;
  glColor3f: procedure(red, green, blue: GLfloat); extdecl;
  glColor3fv: procedure(const v: PGLfloat); extdecl;
  glColor3i: procedure(red, green, blue: GLint); extdecl;
  glColor3iv: procedure(const v: PGLint); extdecl;
  glColor3s: procedure(red, green, blue: GLshort); extdecl;
  glColor3sv: procedure(const v: PGLshort); extdecl;
  glColor3ub: procedure(red, green, blue: GLubyte); extdecl;
  glColor3ubv: procedure(const v: PGLubyte); extdecl;
  glColor3ui: procedure(red, green, blue: GLuint); extdecl;
  glColor3uiv: procedure(const v: PGLuint); extdecl;
  glColor3us: procedure(red, green, blue: GLushort); extdecl;
  glColor3usv: procedure(const v: PGLushort); extdecl;
  glColor4b: procedure(red, green, blue, alpha: GLbyte); extdecl;
  glColor4bv: procedure(const v: PGLbyte); extdecl;
  glColor4d: procedure(red, green, blue, alpha: GLdouble); extdecl;
  glColor4dv: procedure(const v: PGLdouble); extdecl;
  glColor4fv: procedure(const v: PGLfloat); extdecl;
  glColor4i: procedure(red, green, blue, alpha: GLint); extdecl;
  glColor4iv: procedure(const v: PGLint); extdecl;
  glColor4s: procedure(red, green, blue, alpha: GLshort); extdecl;
  glColor4sv: procedure(const v: PGLshort); extdecl;
  glColor4ubv: procedure(const v: PGLubyte); extdecl;
  glColor4ui: procedure(red, green, blue, alpha: GLuint); extdecl;
  glColor4uiv: procedure(const v: PGLuint); extdecl;
  glColor4us: procedure(red, green, blue, alpha: GLushort); extdecl;
  glColor4usv: procedure(const v: PGLushort); extdecl;
  glColorMaterial: procedure(face, mode: GLenum); extdecl;
  glCopyPixels: procedure(x, y: GLint; width, height: GLsizei; atype: GLenum); extdecl;
  glCopyTexImage1D: procedure (target: GLenum; level: GLint; internalFormat: GLenum; x, y: GLint; width: GLsizei; border: GLint); extdecl;
  glCopyTexSubImage1D: procedure(target: GLenum; level, xoffset, x, y: GLint; width: GLsizei); extdecl;
  glDeleteLists: procedure(list: GLuint; range: GLsizei); extdecl;
  glDepthRange: procedure(zNear, zFar: GLclampd); extdecl;
  glDrawBuffer: procedure(mode: GLenum); extdecl;
  glDrawPixels: procedure(width, height: GLsizei; format, atype: GLenum; const pixels: Pointer); extdecl;
  glEdgeFlag: procedure(flag: GLboolean); extdecl;
  glEdgeFlagPointer: procedure(stride: GLsizei; const pointer: Pointer); extdecl;
  glEdgeFlagv: procedure(const flag: PGLboolean); extdecl;
  glEnd: procedure; extdecl;
  glEndList: procedure; extdecl;
  glEvalCoord1d: procedure(u: GLdouble); extdecl;
  glEvalCoord1dv: procedure(const u: PGLdouble); extdecl;
  glEvalCoord1f: procedure(u: GLfloat); extdecl;
  glEvalCoord1fv: procedure(const u: PGLfloat); extdecl;
  glEvalCoord2d: procedure(u, v: GLdouble); extdecl;
  glEvalCoord2dv: procedure(const u: PGLdouble); extdecl;
  glEvalCoord2f: procedure(u, v: GLfloat); extdecl;
  glEvalCoord2fv: procedure(const u: PGLfloat); extdecl;
  glEvalMesh1: procedure(mode: GLenum; i1, i2: GLint); extdecl;
  glEvalMesh2: procedure(mode: GLenum; i1, i2, j1, j2: GLint); extdecl;
  glEvalPoint1: procedure(i: GLint); extdecl;
  glEvalPoint2: procedure(i, j: GLint); extdecl;
  glFeedbackBuffer: procedure(size: GLsizei; atype: GLenum; buffer: PGLfloat); extdecl;
  glFogi: procedure(pname: GLenum; param: GLint); extdecl;
  glFogiv: procedure(pname: GLenum; const params: PGLint); extdecl;
  glFrustum: procedure(left, right, bottom, top, zNear, zFar: GLdouble); extdecl;
  glGenLists: function(range: GLsizei): GLuint; extdecl;
  glGetClipPlane: procedure(plane: GLenum; equation: PGLdouble); extdecl;
  glGetDoublev: procedure(pname: GLenum; params: PGLdouble); extdecl;
  glGetLightiv: procedure(light, pname: GLenum; params: PGLint); extdecl;
  glGetMapdv: procedure(target, query: GLenum; v: PGLdouble); extdecl;
  glGetMapfv: procedure(target, query: GLenum; v: PGLfloat); extdecl;
  glGetMapiv: procedure(target, query: GLenum; v: PGLint); extdecl;
  glGetMaterialiv: procedure(face, pname: GLenum; params: PGLint); extdecl;
  glGetPixelMapfv: procedure(map: GLenum; values: PGLfloat); extdecl;
  glGetPixelMapuiv: procedure(map: GLenum; values: PGLuint); extdecl;
  glGetPixelMapusv: procedure(map: GLenum; values: PGLushort); extdecl;
  glGetPolygonStipple: procedure(mask: PGLubyte); extdecl;
  glGetTexGendv: procedure(coord, pname: GLenum; params: PGLdouble); extdecl;
  glGetTexGenfv: procedure(coord, pname: GLenum; params: PGLfloat); extdecl;
  glGetTexGeniv: procedure(coord, pname: GLenum; params: PGLint); extdecl;
  glGetTexImage: procedure(target: GLenum; level: GLint; format: GLenum; atype: GLenum; pixels: Pointer); extdecl;
  glGetTexLevelParameterfv: procedure(target: GLenum; level: GLint; pname: GLenum; params: Pointer); extdecl;
  glGetTexLevelParameteriv: procedure(target: GLenum; level: GLint; pname: GLenum; params: PGLint); extdecl;
  glIndexMask: procedure(mask: GLuint); extdecl;
  glIndexPointer: procedure(atype: GLenum; stride: GLsizei; const pointer: Pointer); extdecl;
  glIndexd: procedure(c: GLdouble); extdecl;
  glIndexdv: procedure(const c: PGLdouble); extdecl;
  glIndexf: procedure(c: GLfloat); extdecl;
  glIndexfv: procedure(const c: PGLfloat); extdecl;
  glIndexi: procedure(c: GLint); extdecl;
  glIndexiv: procedure(const c: PGLint); extdecl;
  glIndexs: procedure(c: GLshort); extdecl;
  glIndexsv: procedure(const c: PGLshort); extdecl;
  glIndexub: procedure(c: GLubyte); extdecl;
  glIndexubv: procedure(const c: PGLubyte); extdecl;
  glInitNames: procedure; extdecl;
  glInterleavedArrays: procedure(format: GLenum; stride: GLsizei; const pointer: Pointer); extdecl;
  glIsList: function(list: GLuint): GLboolean; extdecl;
  glLightModeli: procedure(pname: GLenum; param: GLint); extdecl;
  glLightModeliv: procedure(pname: GLenum; const params: PGLint); extdecl;
  glLighti: procedure(light, pname: GLenum; param: GLint); extdecl;
  glLightiv: procedure(light, pname: GLenum; const params: PGLint); extdecl;
  glLineStipple: procedure(factor: GLint; pattern: GLushort); extdecl;
  glListBase: procedure(base: GLuint); extdecl;
  glLoadMatrixd: procedure(const m: PGLdouble); extdecl;
  glLoadName: procedure(name: GLuint); extdecl;
  glMap1d: procedure(target: GLenum; u1, u2: GLdouble; stride, order: GLint; const points: PGLdouble); extdecl;
  glMap1f: procedure(target: GLenum; u1, u2: GLfloat; stride, order: GLint; const points: PGLfloat); extdecl;
  glMap2d: procedure(target: GLenum; u1, u2: GLdouble; ustride, uorder: GLint; v1, v2: GLdouble; vstride, vorder: GLint; const points: PGLdouble); extdecl;
  glMap2f: procedure(target: GLenum; u1, u2: GLfloat; ustride, uorder: GLint; v1, v2: GLfloat; vstride, vorder: GLint; const points: PGLfloat); extdecl;
  glMapGrid1d: procedure(un: GLint; u1, u2: GLdouble); extdecl;
  glMapGrid1f: procedure(un: GLint; u1, u2: GLfloat); extdecl;
  glMapGrid2d: procedure(un: GLint; u1, u2: GLdouble; vn: GLint; v1, v2: GLdouble); extdecl;
  glMapGrid2f: procedure(un: GLint; u1, u2: GLfloat; vn: GLint; v1, v2: GLfloat); extdecl;
  glMateriali: procedure(face, pname: GLenum; param: GLint); extdecl;
  glMaterialiv: procedure(face, pname: GLenum; const params: PGLint); extdecl;
  glMultMatrixd: procedure(const m: PGLdouble); extdecl;
  glNewList: procedure(list: GLuint; mode: GLenum); extdecl;
  glNormal3b: procedure(nx, ny, nz: GLbyte); extdecl;
  glNormal3bv: procedure(const v: PGLbyte); extdecl;
  glNormal3d: procedure(nx, ny, nz: GLdouble); extdecl;
  glNormal3dv: procedure(const v: PGLdouble); extdecl;
  glNormal3fv: procedure(const v: PGLfloat); extdecl;
  glNormal3i: procedure(nx, ny, nz: GLint); extdecl;
  glNormal3iv: procedure(const v: PGLint); extdecl;
  glNormal3s: procedure(nx, ny, nz: GLshort); extdecl;
  glNormal3sv: procedure(const v: PGLshort); extdecl;
  glOrtho: procedure(left, right, bottom, top, zNear, zFar: GLdouble); extdecl;
  glPassThrough: procedure(token: GLfloat); extdecl;
  glPixelMapfv: procedure(map: GLenum; mapsize: GLint; const values: PGLfloat); extdecl;
  glPixelMapuiv: procedure(map: GLenum; mapsize: GLint; const values: PGLuint); extdecl;
  glPixelMapusv: procedure(map: GLenum; mapsize: GLint; const values: PGLushort); extdecl;
  glPixelStoref: procedure(pname: GLenum; param: GLfloat); extdecl;
  glPixelTransferf: procedure(pname: GLenum; param: GLfloat); extdecl;
  glPixelTransferi: procedure(pname: GLenum; param: GLint); extdecl;
  glPixelZoom: procedure(xfactor, yfactor: GLfloat); extdecl;
  glPolygonMode: procedure(face, mode: GLenum); extdecl;
  glPolygonStipple: procedure(const mask: PGLubyte); extdecl;
  glPopAttrib: procedure; extdecl;
  glPopClientAttrib: procedure; extdecl;
  glPopName: procedure; extdecl;
  glPrioritizeTextures: procedure(n: GLsizei; const textures: PGLuint; const priorities: PGLclampf); extdecl;
  glPushAttrib: procedure(mask: GLbitfield); extdecl;
  glPushClientAttrib: procedure(mask: GLbitfield); extdecl;
  glPushName: procedure(name: GLuint); extdecl;
  glRasterPos2d: procedure(x, y: GLdouble); extdecl;
  glRasterPos2dv: procedure(const v: PGLdouble); extdecl;
  glRasterPos2f: procedure(x, y: GLfloat); extdecl;
  glRasterPos2fv: procedure(const v: PGLfloat); extdecl;
  glRasterPos2i: procedure(x, y: GLint); extdecl;
  glRasterPos2iv: procedure(const v: PGLint); extdecl;
  glRasterPos2s: procedure(x, y: GLshort); extdecl;
  glRasterPos2sv: procedure(const v: PGLshort); extdecl;
  glRasterPos3d: procedure(x, y, z: GLdouble); extdecl;
  glRasterPos3dv: procedure(const v: PGLdouble); extdecl;
  glRasterPos3f: procedure(x, y, z: GLfloat); extdecl;
  glRasterPos3fv: procedure(const v: PGLfloat); extdecl;
  glRasterPos3i: procedure(x, y, z: GLint); extdecl;
  glRasterPos3iv: procedure(const v: PGLint); extdecl;
  glRasterPos3s: procedure(x, y, z: GLshort); extdecl;
  glRasterPos3sv: procedure(const v: PGLshort); extdecl;
  glRasterPos4d: procedure(x, y, z, w: GLdouble); extdecl;
  glRasterPos4dv: procedure(const v: PGLdouble); extdecl;
  glRasterPos4f: procedure(x, y, z, w: GLfloat); extdecl;
  glRasterPos4fv: procedure(const v: PGLfloat); extdecl;
  glRasterPos4i: procedure(x, y, z, w: GLint); extdecl;
  glRasterPos4iv: procedure(const v: PGLint); extdecl;
  glRasterPos4s: procedure(x, y, z, w: GLshort); extdecl;
  glRasterPos4sv: procedure(const v: PGLshort); extdecl;
  glReadBuffer: procedure(mode: GLenum); extdecl;
  glRectd: procedure(x1, y1, x2, y2: GLdouble); extdecl;
  glRectdv: procedure(const v1: PGLdouble; const v2: PGLdouble); extdecl;
  glRectf: procedure(x1, y1, x2, y2: GLfloat); extdecl;
  glRectfv: procedure(const v1: PGLfloat; const v2: PGLfloat); extdecl;
  glRecti: procedure(x1, y1, x2, y2: GLint); extdecl;
  glRectiv: procedure(const v1: PGLint; const v2: PGLint); extdecl;
  glRects: procedure(x1, y1, x2, y2: GLshort); extdecl;
  glRectsv: procedure(const v1: PGLshort; const v2: PGLshort); extdecl;
  glRenderMode: function(mode: GLint): GLint; extdecl;
  glRotated: procedure(angle, x, y, z: GLdouble); extdecl;
  glScaled: procedure(x, y, z: GLdouble); extdecl;
  glSelectBuffer: procedure(size: GLsizei; buffer: PGLuint); extdecl;
  glTexCoord1d: procedure(s: GLdouble); extdecl;
  glTexCoord1dv: procedure(const v: PGLdouble); extdecl;
  glTexCoord1f: procedure(s: GLfloat); extdecl;
  glTexCoord1fv: procedure(const v: PGLfloat); extdecl;
  glTexCoord1i: procedure(s: GLint); extdecl;
  glTexCoord1iv: procedure(const v: PGLint); extdecl;
  glTexCoord1s: procedure(s: GLshort); extdecl;
  glTexCoord1sv: procedure(const v: PGLshort); extdecl;
  glTexCoord2d: procedure(s, t: GLdouble); extdecl;
  glTexCoord2dv: procedure(const v: PGLdouble); extdecl;
  glTexCoord2f: procedure(s, t: GLfloat); extdecl;
  glTexCoord2fv: procedure(const v: PGLfloat); extdecl;
  glTexCoord2i: procedure(s, t: GLint); extdecl;
  glTexCoord2iv: procedure(const v: PGLint); extdecl;
  glTexCoord2s: procedure(s, t: GLshort); extdecl;
  glTexCoord2sv: procedure(const v: PGLshort); extdecl;
  glTexCoord3d: procedure(s, t, r: GLdouble); extdecl;
  glTexCoord3dv: procedure(const v: PGLdouble); extdecl;
  glTexCoord3f: procedure(s, t, r: GLfloat); extdecl;
  glTexCoord3fv: procedure(const v: PGLfloat); extdecl;
  glTexCoord3i: procedure(s, t, r: GLint); extdecl;
  glTexCoord3iv: procedure(const v: PGLint); extdecl;
  glTexCoord3s: procedure(s, t, r: GLshort); extdecl;
  glTexCoord3sv: procedure(const v: PGLshort); extdecl;
  glTexCoord4d: procedure(s, t, r, q: GLdouble); extdecl;
  glTexCoord4dv: procedure(const v: PGLdouble); extdecl;
  glTexCoord4f: procedure(s, t, r, q: GLfloat); extdecl;
  glTexCoord4fv: procedure(const v: PGLfloat); extdecl;
  glTexCoord4i: procedure(s, t, r, q: GLint); extdecl;
  glTexCoord4iv: procedure(const v: PGLint); extdecl;
  glTexCoord4s: procedure(s, t, r, q: GLshort); extdecl;
  glTexCoord4sv: procedure(const v: PGLshort); extdecl;
  glTexGend: procedure(coord: GLenum; pname: GLenum; param: GLdouble); extdecl;
  glTexGendv: procedure(coord: GLenum; pname: GLenum; const params: PGLdouble); extdecl;
  glTexGenf: procedure(coord: GLenum; pname: GLenum; param: GLfloat); extdecl;
  glTexGenfv: procedure(coord: GLenum; pname: GLenum; const params: PGLfloat); extdecl;
  glTexGeni: procedure(coord: GLenum; pname: GLenum; param: GLint); extdecl;
  glTexGeniv: procedure(coord: GLenum; pname: GLenum; const params: PGLint); extdecl;
  glTexImage1D: procedure(target: GLenum; level: GLInt; internalformat: GLEnum; width: GLsizei; border: GLint; format, atype: GLenum; const pixels: Pointer); extdecl;
  glTexSubImage1D: procedure(target: GLenum; level, xoffset: GLint; width: GLsizei; format, atype: GLenum; const pixels: Pointer); extdecl;
  glTranslated: procedure(x, y, z: GLdouble); extdecl;
  glVertex2d: procedure(x, y: GLdouble); extdecl;
  glVertex2dv: procedure(const v: PGLdouble); extdecl;
  glVertex2f: procedure(x, y: GLfloat); extdecl;
  glVertex2fv: procedure(const v: PGLfloat); extdecl;
  glVertex2i: procedure(x, y: GLint); extdecl;
  glVertex2iv: procedure(const v: PGLint); extdecl;
  glVertex2s: procedure(x, y: GLshort); extdecl;
  glVertex2sv: procedure(const v: PGLshort); extdecl;
  glVertex3d: procedure(x, y, z: GLdouble); extdecl;
  glVertex3dv: procedure(const v: PGLdouble); extdecl;
  glVertex3f: procedure(x, y, z: GLfloat); extdecl;
  glVertex3fv: procedure(const v: PGLfloat); extdecl;
  glVertex3i: procedure(x, y, z: GLint); extdecl;
  glVertex3iv: procedure(const v: PGLint); extdecl;
  glVertex3s: procedure(x, y, z: GLshort); extdecl;
  glVertex3sv: procedure(const v: PGLshort); extdecl;
  glVertex4d: procedure(x, y, z, w: GLdouble); extdecl;
  glVertex4dv: procedure(const v: PGLdouble); extdecl;
  glVertex4f: procedure(x, y, z, w: GLfloat); extdecl;
  glVertex4fv: procedure(const v: PGLfloat); extdecl;
  glVertex4i: procedure(x, y, z, w: GLint); extdecl;
  glVertex4iv: procedure(const v: PGLint); extdecl;
  glVertex4s: procedure(x, y, z, w: GLshort); extdecl;
  glVertex4sv: procedure(const v: PGLshort); extdecl;
{$ENDIF}

var
  GL : TLibrary = nil;

function LoadGL( const aPath : AnsiString = GLDefaultPath ) : Boolean;

implementation

uses math;

function LoadGL ( const aPath : AnsiString ) : Boolean;
  function GetSymbol( const aSymbol : AnsiString ) : Pointer;
  begin
    GetSymbol := GL.Get( aSymbol );
    if GetSymbol = nil then
      raise ELibraryError.Create( 'GL : Symbol "'+aSymbol+'" not found!' );
  end;
  function TryGetSymbol( const aSymbol : AnsiString ) : Pointer;
  begin
    TryGetSymbol := GL.Get( aSymbol );
  end;
begin
  if GL <> nil then Exit( True );

  {$if defined(cpui386) or defined(cpux86_64)}
  SetExceptionMask([exInvalidOp, exDenormalized, exZeroDivide,exOverflow, exUnderflow, exPrecision]);
  {$endif}

  GL := TLibrary.Load( aPath );
  if GL = nil then Exit( False );

  Pointer(glAlphaFunc) := GetSymbol('glAlphaFunc');
  Pointer(glBindTexture) := GetSymbol('glBindTexture');
  Pointer(glBlendFunc) := GetSymbol('glBlendFunc');
  Pointer(glClear) := GetSymbol('glClear');
  Pointer(glClearColor) := GetSymbol('glClearColor');
  Pointer(glClearDepthf) := GetSymbol('glClearDepthf');
  Pointer(glClearStencil) := GetSymbol('glClearStencil');
  Pointer(glColor4f) := GetSymbol('glColor4f');
  Pointer(glColor4ub) := GetSymbol('glColor4ub');
  Pointer(glColorMask) := GetSymbol('glColorMask');
  Pointer(glColorPointer) := GetSymbol('glColorPointer');
  Pointer(glCopyTexImage2D) := GetSymbol('glCopyTexImage2D');
  Pointer(glCopyTexSubImage2D) := GetSymbol('glCopyTexSubImage2D');
  Pointer(glCullFace) := GetSymbol('glCullFace');
  Pointer(glDeleteTextures) := GetSymbol('glDeleteTextures');
  Pointer(glDepthFunc) := GetSymbol('glDepthFunc');
  Pointer(glDepthMask) := GetSymbol('glDepthMask');
  Pointer(glDisable) := GetSymbol('glDisable');
  Pointer(glDisableClientState) := GetSymbol('glDisableClientState');
  Pointer(glDrawArrays) := GetSymbol('glDrawArrays');
  Pointer(glDrawElements) := GetSymbol('glDrawElements');
  Pointer(glEnable) := GetSymbol('glEnable');
  Pointer(glEnableClientState) := GetSymbol('glEnableClientState');
  Pointer(glFinish) := GetSymbol('glFinish');
  Pointer(glFlush) := GetSymbol('glFlush');
  Pointer(glFogf) := GetSymbol('glFogf');
  Pointer(glFogfv) := GetSymbol('glFogfv');
  Pointer(glFrontFace) := GetSymbol('glFrontFace');
  Pointer(glGenTextures) := GetSymbol('glGenTextures');
  Pointer(glGetBooleanv) := GetSymbol('glGetBooleanv');
  Pointer(glGetError) := GetSymbol('glGetError');
  Pointer(glGetFloatv) := GetSymbol('glGetFloatv');
  Pointer(glGetIntegerv) := GetSymbol('glGetIntegerv');
  Pointer(glGetLightfv) := GetSymbol('glGetLightfv');
  Pointer(glGetMaterialfv) := GetSymbol('glGetMaterialfv');
  Pointer(glGetPointerv) := GetSymbol('glGetPointerv');
  Pointer(glGetString) := GetSymbol('glGetString');
  Pointer(glGetTexEnvfv) := GetSymbol('glGetTexEnvfv');
  Pointer(glGetTexEnviv) := GetSymbol('glGetTexEnviv');
  Pointer(glGetTexParameterfv) := GetSymbol('glGetTexParameterfv');
  Pointer(glGetTexParameteriv) := GetSymbol('glGetTexParameteriv');
  Pointer(glHint) := GetSymbol('glHint');
  Pointer(glIsEnabled) := GetSymbol('glIsEnabled');
  Pointer(glIsTexture) := GetSymbol('glIsTexture');
  Pointer(glLightModelf) := GetSymbol('glLightModelf');
  Pointer(glLightModelfv) := GetSymbol('glLightModelfv');
  Pointer(glLightf) := GetSymbol('glLightf');
  Pointer(glLightfv) := GetSymbol('glLightfv');
  Pointer(glLineWidth) := GetSymbol('glLineWidth');
  Pointer(glLoadIdentity) := GetSymbol('glLoadIdentity');
  Pointer(glLoadMatrixf) := GetSymbol('glLoadMatrixf');
  Pointer(glLogicOp) := GetSymbol('glLogicOp');
  Pointer(glMaterialf) := GetSymbol('glMaterialf');
  Pointer(glMaterialfv) := GetSymbol('glMaterialfv');
  Pointer(glMatrixMode) := GetSymbol('glMatrixMode');
  Pointer(glMultMatrixf) := GetSymbol('glMultMatrixf');
  Pointer(glNormal3f) := GetSymbol('glNormal3f');
  Pointer(glNormalPointer) := GetSymbol('glNormalPointer');
  Pointer(glOrthof) := GetSymbol('glOrthof');
  Pointer(glPixelStorei) := GetSymbol('glPixelStorei');
  Pointer(glPointSize) := GetSymbol('glPointSize');
  Pointer(glPolygonOffset) := GetSymbol('glPolygonOffset');
  Pointer(glPopMatrix) := GetSymbol('glPopMatrix');
  Pointer(glPushMatrix) := GetSymbol('glPushMatrix');
  Pointer(glReadPixels) := GetSymbol('glReadPixels');
  Pointer(glRotatef) := GetSymbol('glRotatef');
  Pointer(glScalef) := GetSymbol('glScalef');
  Pointer(glScissor) := GetSymbol('glScissor');
  Pointer(glShadeModel) := GetSymbol('glShadeModel');
  Pointer(glStencilFunc) := GetSymbol('glStencilFunc');
  Pointer(glStencilMask) := GetSymbol('glStencilMask');
  Pointer(glStencilOp) := GetSymbol('glStencilOp');
  Pointer(glTexCoordPointer) := GetSymbol('glTexCoordPointer');
  Pointer(glTexEnvf) := GetSymbol('glTexEnvf');
  Pointer(glTexEnvfv) := GetSymbol('glTexEnvfv');
  Pointer(glTexEnvi) := GetSymbol('glTexEnvi');
  Pointer(glTexEnviv) := GetSymbol('glTexEnviv');
  Pointer(glTexImage2D) := GetSymbol('glTexImage2D');
  Pointer(glTexParameterf) := GetSymbol('glTexParameterf');
  Pointer(glTexParameterfv) := GetSymbol('glTexParameterfv');
  Pointer(glTexParameteri) := GetSymbol('glTexParameteri');
  Pointer(glTexParameteriv) := GetSymbol('glTexParameteriv');
  Pointer(glTexSubImage2D) := GetSymbol('glTexSubImage2D');
  Pointer(glTranslatef) := GetSymbol('glTranslatef');
  Pointer(glVertexPointer) := GetSymbol('glVertexPointer');
  Pointer(glViewport) := GetSymbol('glViewport');

{$IFNDEF GLES11}
  Pointer(glAccum) := GetSymbol('glAccum');
  Pointer(glAreTexturesResident) := GetSymbol('glAreTexturesResident');
  Pointer(glArrayElement) := GetSymbol('glArrayElement');
  Pointer(glBegin) := GetSymbol('glBegin');
  Pointer(glBitmap) := GetSymbol('glBitmap');
  Pointer(glCallList) := GetSymbol('glCallList');
  Pointer(glCallLists) := GetSymbol('glCallLists');
  Pointer(glClearAccum) := GetSymbol('glClearAccum');
  Pointer(glClearDepth) := GetSymbol('glClearDepth');
  Pointer(glClearIndex) := GetSymbol('glClearIndex');
  Pointer(glClipPlane) := GetSymbol('glClipPlane');
  Pointer(glColor3b) := GetSymbol('glColor3b');
  Pointer(glColor3bv) := GetSymbol('glColor3bv');
  Pointer(glColor3d) := GetSymbol('glColor3d');
  Pointer(glColor3dv) := GetSymbol('glColor3dv');
  Pointer(glColor3f) := GetSymbol('glColor3f');
  Pointer(glColor3fv) := GetSymbol('glColor3fv');
  Pointer(glColor3i) := GetSymbol('glColor3i');
  Pointer(glColor3iv) := GetSymbol('glColor3iv');
  Pointer(glColor3s) := GetSymbol('glColor3s');
  Pointer(glColor3sv) := GetSymbol('glColor3sv');
  Pointer(glColor3ub) := GetSymbol('glColor3ub');
  Pointer(glColor3ubv) := GetSymbol('glColor3ubv');
  Pointer(glColor3ui) := GetSymbol('glColor3ui');
  Pointer(glColor3uiv) := GetSymbol('glColor3uiv');
  Pointer(glColor3us) := GetSymbol('glColor3us');
  Pointer(glColor3usv) := GetSymbol('glColor3usv');
  Pointer(glColor4b) := GetSymbol('glColor4b');
  Pointer(glColor4bv) := GetSymbol('glColor4bv');
  Pointer(glColor4d) := GetSymbol('glColor4d');
  Pointer(glColor4dv) := GetSymbol('glColor4dv');
  Pointer(glColor4fv) := GetSymbol('glColor4fv');
  Pointer(glColor4i) := GetSymbol('glColor4i');
  Pointer(glColor4iv) := GetSymbol('glColor4iv');
  Pointer(glColor4s) := GetSymbol('glColor4s');
  Pointer(glColor4sv) := GetSymbol('glColor4sv');
  Pointer(glColor4ubv) := GetSymbol('glColor4ubv');
  Pointer(glColor4ui) := GetSymbol('glColor4ui');
  Pointer(glColor4uiv) := GetSymbol('glColor4uiv');
  Pointer(glColor4us) := GetSymbol('glColor4us');
  Pointer(glColor4usv) := GetSymbol('glColor4usv');
  Pointer(glColorMaterial) := GetSymbol('glColorMaterial');
  Pointer(glCopyPixels) := GetSymbol('glCopyPixels');
  Pointer(glCopyTexImage1D) := GetSymbol('glCopyTexImage1D');
  Pointer(glCopyTexSubImage1D) := GetSymbol('glCopyTexSubImage1D');
  Pointer(glDeleteLists) := GetSymbol('glDeleteLists');
  Pointer(glDepthRange) := GetSymbol('glDepthRange');
  Pointer(glDrawBuffer) := GetSymbol('glDrawBuffer');
  Pointer(glDrawPixels) := GetSymbol('glDrawPixels');
  Pointer(glEdgeFlag) := GetSymbol('glEdgeFlag');
  Pointer(glEdgeFlagPointer) := GetSymbol('glEdgeFlagPointer');
  Pointer(glEdgeFlagv) := GetSymbol('glEdgeFlagv');
  Pointer(glEnd) := GetSymbol('glEnd');
  Pointer(glEndList) := GetSymbol('glEndList');
  Pointer(glEvalCoord1d) := GetSymbol('glEvalCoord1d');
  Pointer(glEvalCoord1dv) := GetSymbol('glEvalCoord1dv');
  Pointer(glEvalCoord1f) := GetSymbol('glEvalCoord1f');
  Pointer(glEvalCoord1fv) := GetSymbol('glEvalCoord1fv');
  Pointer(glEvalCoord2d) := GetSymbol('glEvalCoord2d');
  Pointer(glEvalCoord2dv) := GetSymbol('glEvalCoord2dv');
  Pointer(glEvalCoord2f) := GetSymbol('glEvalCoord2f');
  Pointer(glEvalCoord2fv) := GetSymbol('glEvalCoord2fv');
  Pointer(glEvalMesh1) := GetSymbol('glEvalMesh1');
  Pointer(glEvalMesh2) := GetSymbol('glEvalMesh2');
  Pointer(glEvalPoint1) := GetSymbol('glEvalPoint1');
  Pointer(glEvalPoint2) := GetSymbol('glEvalPoint2');
  Pointer(glFeedbackBuffer) := GetSymbol('glFeedbackBuffer');
  Pointer(glFogi) := GetSymbol('glFogi');
  Pointer(glFogiv) := GetSymbol('glFogiv');
  Pointer(glFrustum) := GetSymbol('glFrustum');
  Pointer(glGenLists) := GetSymbol('glGenLists');
  Pointer(glGetClipPlane) := GetSymbol('glGetClipPlane');
  Pointer(glGetDoublev) := GetSymbol('glGetDoublev');
  Pointer(glGetLightiv) := GetSymbol('glGetLightiv');
  Pointer(glGetMapdv) := GetSymbol('glGetMapdv');
  Pointer(glGetMapfv) := GetSymbol('glGetMapfv');
  Pointer(glGetMapiv) := GetSymbol('glGetMapiv');
  Pointer(glGetMaterialiv) := GetSymbol('glGetMaterialiv');
  Pointer(glGetPixelMapfv) := GetSymbol('glGetPixelMapfv');
  Pointer(glGetPixelMapuiv) := GetSymbol('glGetPixelMapuiv');
  Pointer(glGetPixelMapusv) := GetSymbol('glGetPixelMapusv');
  Pointer(glGetPolygonStipple) := GetSymbol('glGetPolygonStipple');
  Pointer(glGetTexGendv) := GetSymbol('glGetTexGendv');
  Pointer(glGetTexGenfv) := GetSymbol('glGetTexGenfv');
  Pointer(glGetTexGeniv) := GetSymbol('glGetTexGeniv');
  Pointer(glGetTexImage) := GetSymbol('glGetTexImage');
  Pointer(glGetTexLevelParameterfv) := GetSymbol('glGetTexLevelParameterfv');
  Pointer(glGetTexLevelParameteriv) := GetSymbol('glGetTexLevelParameteriv');
  Pointer(glIndexMask) := GetSymbol('glIndexMask');
  Pointer(glIndexPointer) := GetSymbol('glIndexPointer');
  Pointer(glIndexd) := GetSymbol('glIndexd');
  Pointer(glIndexdv) := GetSymbol('glIndexdv');
  Pointer(glIndexf) := GetSymbol('glIndexf');
  Pointer(glIndexfv) := GetSymbol('glIndexfv');
  Pointer(glIndexi) := GetSymbol('glIndexi');
  Pointer(glIndexiv) := GetSymbol('glIndexiv');
  Pointer(glIndexs) := GetSymbol('glIndexs');
  Pointer(glIndexsv) := GetSymbol('glIndexsv');
  Pointer(glIndexub) := GetSymbol('glIndexub');
  Pointer(glIndexubv) := GetSymbol('glIndexubv');
  Pointer(glInitNames) := GetSymbol('glInitNames');
  Pointer(glInterleavedArrays) := GetSymbol('glInterleavedArrays');
  Pointer(glIsList) := GetSymbol('glIsList');
  Pointer(glLightModeli) := GetSymbol('glLightModeli');
  Pointer(glLightModeliv) := GetSymbol('glLightModeliv');
  Pointer(glLighti) := GetSymbol('glLighti');
  Pointer(glLightiv) := GetSymbol('glLightiv');
  Pointer(glLineStipple) := GetSymbol('glLineStipple');
  Pointer(glListBase) := GetSymbol('glListBase');
  Pointer(glLoadMatrixd) := GetSymbol('glLoadMatrixd');
  Pointer(glLoadName) := GetSymbol('glLoadName');
  Pointer(glMap1d) := GetSymbol('glMap1d');
  Pointer(glMap1f) := GetSymbol('glMap1f');
  Pointer(glMap2d) := GetSymbol('glMap2d');
  Pointer(glMap2f) := GetSymbol('glMap2f');
  Pointer(glMapGrid1d) := GetSymbol('glMapGrid1d');
  Pointer(glMapGrid1f) := GetSymbol('glMapGrid1f');
  Pointer(glMapGrid2d) := GetSymbol('glMapGrid2d');
  Pointer(glMapGrid2f) := GetSymbol('glMapGrid2f');
  Pointer(glMateriali) := GetSymbol('glMateriali');
  Pointer(glMaterialiv) := GetSymbol('glMaterialiv');
  Pointer(glMultMatrixd) := GetSymbol('glMultMatrixd');
  Pointer(glNewList) := GetSymbol('glNewList');
  Pointer(glNormal3b) := GetSymbol('glNormal3b');
  Pointer(glNormal3bv) := GetSymbol('glNormal3bv');
  Pointer(glNormal3d) := GetSymbol('glNormal3d');
  Pointer(glNormal3dv) := GetSymbol('glNormal3dv');
  Pointer(glNormal3fv) := GetSymbol('glNormal3fv');
  Pointer(glNormal3i) := GetSymbol('glNormal3i');
  Pointer(glNormal3iv) := GetSymbol('glNormal3iv');
  Pointer(glNormal3s) := GetSymbol('glNormal3s');
  Pointer(glNormal3sv) := GetSymbol('glNormal3sv');
  Pointer(glOrtho) := GetSymbol('glOrtho');
  Pointer(glPassThrough) := GetSymbol('glPassThrough');
  Pointer(glPixelMapfv) := GetSymbol('glPixelMapfv');
  Pointer(glPixelMapuiv) := GetSymbol('glPixelMapuiv');
  Pointer(glPixelMapusv) := GetSymbol('glPixelMapusv');
  Pointer(glPixelStoref) := GetSymbol('glPixelStoref');
  Pointer(glPixelTransferf) := GetSymbol('glPixelTransferf');
  Pointer(glPixelTransferi) := GetSymbol('glPixelTransferi');
  Pointer(glPixelZoom) := GetSymbol('glPixelZoom');
  Pointer(glPolygonMode) := GetSymbol('glPolygonMode');
  Pointer(glPolygonStipple) := GetSymbol('glPolygonStipple');
  Pointer(glPopAttrib) := GetSymbol('glPopAttrib');
  Pointer(glPopClientAttrib) := GetSymbol('glPopClientAttrib');
  Pointer(glPopName) := GetSymbol('glPopName');
  Pointer(glPrioritizeTextures) := GetSymbol('glPrioritizeTextures');
  Pointer(glPushAttrib) := GetSymbol('glPushAttrib');
  Pointer(glPushClientAttrib) := GetSymbol('glPushClientAttrib');
  Pointer(glPushName) := GetSymbol('glPushName');
  Pointer(glRasterPos2d) := GetSymbol('glRasterPos2d');
  Pointer(glRasterPos2dv) := GetSymbol('glRasterPos2dv');
  Pointer(glRasterPos2f) := GetSymbol('glRasterPos2f');
  Pointer(glRasterPos2fv) := GetSymbol('glRasterPos2fv');
  Pointer(glRasterPos2i) := GetSymbol('glRasterPos2i');
  Pointer(glRasterPos2iv) := GetSymbol('glRasterPos2iv');
  Pointer(glRasterPos2s) := GetSymbol('glRasterPos2s');
  Pointer(glRasterPos2sv) := GetSymbol('glRasterPos2sv');
  Pointer(glRasterPos3d) := GetSymbol('glRasterPos3d');
  Pointer(glRasterPos3dv) := GetSymbol('glRasterPos3dv');
  Pointer(glRasterPos3f) := GetSymbol('glRasterPos3f');
  Pointer(glRasterPos3fv) := GetSymbol('glRasterPos3fv');
  Pointer(glRasterPos3i) := GetSymbol('glRasterPos3i');
  Pointer(glRasterPos3iv) := GetSymbol('glRasterPos3iv');
  Pointer(glRasterPos3s) := GetSymbol('glRasterPos3s');
  Pointer(glRasterPos3sv) := GetSymbol('glRasterPos3sv');
  Pointer(glRasterPos4d) := GetSymbol('glRasterPos4d');
  Pointer(glRasterPos4dv) := GetSymbol('glRasterPos4dv');
  Pointer(glRasterPos4f) := GetSymbol('glRasterPos4f');
  Pointer(glRasterPos4fv) := GetSymbol('glRasterPos4fv');
  Pointer(glRasterPos4i) := GetSymbol('glRasterPos4i');
  Pointer(glRasterPos4iv) := GetSymbol('glRasterPos4iv');
  Pointer(glRasterPos4s) := GetSymbol('glRasterPos4s');
  Pointer(glRasterPos4sv) := GetSymbol('glRasterPos4sv');
  Pointer(glReadBuffer) := GetSymbol('glReadBuffer');
  Pointer(glRectd) := GetSymbol('glRectd');
  Pointer(glRectdv) := GetSymbol('glRectdv');
  Pointer(glRectf) := GetSymbol('glRectf');
  Pointer(glRectfv) := GetSymbol('glRectfv');
  Pointer(glRecti) := GetSymbol('glRecti');
  Pointer(glRectiv) := GetSymbol('glRectiv');
  Pointer(glRects) := GetSymbol('glRects');
  Pointer(glRectsv) := GetSymbol('glRectsv');
  Pointer(glRenderMode) := GetSymbol('glRenderMode');
  Pointer(glRotated) := GetSymbol('glRotated');
  Pointer(glScaled) := GetSymbol('glScaled');
  Pointer(glSelectBuffer) := GetSymbol('glSelectBuffer');
  Pointer(glTexCoord1d) := GetSymbol('glTexCoord1d');
  Pointer(glTexCoord1dv) := GetSymbol('glTexCoord1dv');
  Pointer(glTexCoord1f) := GetSymbol('glTexCoord1f');
  Pointer(glTexCoord1fv) := GetSymbol('glTexCoord1fv');
  Pointer(glTexCoord1i) := GetSymbol('glTexCoord1i');
  Pointer(glTexCoord1iv) := GetSymbol('glTexCoord1iv');
  Pointer(glTexCoord1s) := GetSymbol('glTexCoord1s');
  Pointer(glTexCoord1sv) := GetSymbol('glTexCoord1sv');
  Pointer(glTexCoord2d) := GetSymbol('glTexCoord2d');
  Pointer(glTexCoord2dv) := GetSymbol('glTexCoord2dv');
  Pointer(glTexCoord2f) := GetSymbol('glTexCoord2f');
  Pointer(glTexCoord2fv) := GetSymbol('glTexCoord2fv');
  Pointer(glTexCoord2i) := GetSymbol('glTexCoord2i');
  Pointer(glTexCoord2iv) := GetSymbol('glTexCoord2iv');
  Pointer(glTexCoord2s) := GetSymbol('glTexCoord2s');
  Pointer(glTexCoord2sv) := GetSymbol('glTexCoord2sv');
  Pointer(glTexCoord3d) := GetSymbol('glTexCoord3d');
  Pointer(glTexCoord3dv) := GetSymbol('glTexCoord3dv');
  Pointer(glTexCoord3f) := GetSymbol('glTexCoord3f');
  Pointer(glTexCoord3fv) := GetSymbol('glTexCoord3fv');
  Pointer(glTexCoord3i) := GetSymbol('glTexCoord3i');
  Pointer(glTexCoord3iv) := GetSymbol('glTexCoord3iv');
  Pointer(glTexCoord3s) := GetSymbol('glTexCoord3s');
  Pointer(glTexCoord3sv) := GetSymbol('glTexCoord3sv');
  Pointer(glTexCoord4d) := GetSymbol('glTexCoord4d');
  Pointer(glTexCoord4dv) := GetSymbol('glTexCoord4dv');
  Pointer(glTexCoord4f) := GetSymbol('glTexCoord4f');
  Pointer(glTexCoord4fv) := GetSymbol('glTexCoord4fv');
  Pointer(glTexCoord4i) := GetSymbol('glTexCoord4i');
  Pointer(glTexCoord4iv) := GetSymbol('glTexCoord4iv');
  Pointer(glTexCoord4s) := GetSymbol('glTexCoord4s');
  Pointer(glTexCoord4sv) := GetSymbol('glTexCoord4sv');
  Pointer(glTexGend) := GetSymbol('glTexGend');
  Pointer(glTexGendv) := GetSymbol('glTexGendv');
  Pointer(glTexGenf) := GetSymbol('glTexGenf');
  Pointer(glTexGenfv) := GetSymbol('glTexGenfv');
  Pointer(glTexGeni) := GetSymbol('glTexGeni');
  Pointer(glTexGeniv) := GetSymbol('glTexGeniv');
  Pointer(glTexImage1D) := GetSymbol('glTexImage1D');
  Pointer(glTexSubImage1D) := GetSymbol('glTexSubImage1D');
  Pointer(glTranslated) := GetSymbol('glTranslated');
  Pointer(glVertex2d) := GetSymbol('glVertex2d');
  Pointer(glVertex2dv) := GetSymbol('glVertex2dv');
  Pointer(glVertex2f) := GetSymbol('glVertex2f');
  Pointer(glVertex2fv) := GetSymbol('glVertex2fv');
  Pointer(glVertex2i) := GetSymbol('glVertex2i');
  Pointer(glVertex2iv) := GetSymbol('glVertex2iv');
  Pointer(glVertex2s) := GetSymbol('glVertex2s');
  Pointer(glVertex2sv) := GetSymbol('glVertex2sv');
  Pointer(glVertex3d) := GetSymbol('glVertex3d');
  Pointer(glVertex3dv) := GetSymbol('glVertex3dv');
  Pointer(glVertex3f) := GetSymbol('glVertex3f');
  Pointer(glVertex3fv) := GetSymbol('glVertex3fv');
  Pointer(glVertex3i) := GetSymbol('glVertex3i');
  Pointer(glVertex3iv) := GetSymbol('glVertex3iv');
  Pointer(glVertex3s) := GetSymbol('glVertex3s');
  Pointer(glVertex3sv) := GetSymbol('glVertex3sv');
  Pointer(glVertex4d) := GetSymbol('glVertex4d');
  Pointer(glVertex4dv) := GetSymbol('glVertex4dv');
  Pointer(glVertex4f) := GetSymbol('glVertex4f');
  Pointer(glVertex4fv) := GetSymbol('glVertex4fv');
  Pointer(glVertex4i) := GetSymbol('glVertex4i');
  Pointer(glVertex4iv) := GetSymbol('glVertex4iv');
  Pointer(glVertex4s) := GetSymbol('glVertex4s');
  Pointer(glVertex4sv) := GetSymbol('glVertex4sv');
{$ENDIF}

  Exit( True );
end;

finalization
  if GL <> nil then FreeAndNil( GL );

end.

